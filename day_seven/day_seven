# Advent of Code
# Day 7

import re
rules = []
avaliable_next_steps = []
all_letters = []
output = []

def ShouldBeBefore(new_char, before_char):
    for rule in rules:
        if (rule.must_be_done == before_char) & (rule.before == new_char):
            return True
    return False

class Rule:
    def __init__(self, must_be_done, before):
        self.must_be_done = must_be_done
        self.before = before

input = open('input.txt').readlines()

for line in input:
    #parse the line and extract a rules
    words = re.findall(r"\w+", line)
    must_be_done = words[1]
    before = words[7]
    all_letters.append(must_be_done)
    all_letters.append(before)

    # It seems like from the logic here for a step to be avaliable_next_steps
    # it needs to have been 'seen' before in a line ??
    avaliable_next_steps.append(must_be_done)

    # Create a Rule object and append it to our array of rules
    the_rule = Rule(must_be_done, before)
    rules.append(the_rule)

    # If there is only one next step then put the first step into output
    if len(avaliable_next_steps) == 1:
        output.append(avaliable_next_steps[0])
    else:
        counter = 0
        if must_be_done not in output:
            for step in avaliable_next_steps:
                pos_nexts = []
                #posible_insert_points = {}
                if ShouldBeBefore(step, before):
                    if before not in output:
                        print (output)
                        output.insert(counter, before)
                        print (output)
                else:
                    if before not in output:
                        output.insert(counter, before)
        counter += 1


as_a_set = set(all_letters)
sorted_letters = sorted(list(as_a_set))

# for letter in sorted_letters:
#     print (letter)

# avaliable_next_steps


# from string import ascii_uppercase
# for ch in ascii_uppercase:
#     if (ch in sorted_letters) & (ch not in output):
#         #output.append(ch)
#         # go through the output array (if its populated)
#         # for letter in position 0 find if ch should be before it
#         # if it should be put ch in position 0 else continue
#         if not output:
#             print ("nothing in output yet")
#             output.append(ch)
#         else:
#             counter = 0
#             for char_in_output in output:
#                 if ShouldBeBefore(ch, char_in_output):
#                     # print (ch, "should be before", char_in_output)
#                     output.insert (counter, ch)
#                     break
#                 #if we find a character that the new chracter must be before then
#                 # insert the new character in the position in the array directly before
#                 # that character
#                 counter += 1
#             if ch not in output:
#                 output.insert(counter, ch)
print (''.join(output))
