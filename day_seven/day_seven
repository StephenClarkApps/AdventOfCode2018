
import re
rules = []
avaliable_next_steps = []
all_letters = []

class Rule:
    def __init__(self, must_be_done, before):
        self.must_be_done = must_be_done
        self.before = before

input = open('input.txt').readlines()

for line in input:
    #parse the line and extract a rules
    words = re.findall(r"\w+", line)
    must_be_done = words[1]
    before = words[7]
    all_letters.append(must_be_done)
    all_letters.append(before)

    the_rule = Rule(must_be_done, before)
    rules.append(the_rule)

as_a_set = set(all_letters)
sorted_letters = sorted(list(as_a_set))

# for letter in sorted_letters:
#     print (letter)
output = []

from string import ascii_uppercase

# before_output = output
for ch in ascii_uppercase:
    if (ch in sorted_letters) & (ch not in output):
        #output.append(ch)
        # go through the output array (if its populated)
        # for letter in position 0 find if ch should be before it
        # if it should be put ch in position 0 else continue
        if not output:
            print ("nothing in output yet")
            output.append(ch)
        else:
            for x in output:
                print (x)
        #insert (position, ch)
